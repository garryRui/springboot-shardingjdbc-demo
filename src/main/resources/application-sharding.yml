spring:
  shardingsphere:
    datasource:
      names: ds2
      ds2:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://localhost:3306/ds2?useSSL=false&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&transformedBitIsBoolean=true&tinyInt1isBit=false&allowMultiQueries=true&serverTimezone=GMT%2B8
        username: root
        password: root
#      ds1:
#        type: com.zaxxer.hikari.HikariDataSource
#        driver-class-name: com.mysql.cj.jdbc.Driver
#        jdbc-url: jdbc:mysql://192.168.115.133:3306/ds1
#        username: hjy
#        password: 123456
    sharding:
      tables:
#        t_order:
#          actual-data-nodes: ds$->{0..1}.t_order$->{0..1}
#          ## 指定分库规则
#          database-strategy:
#            inline:
#              sharding-column: user_id
#              algorithm-expression: ds$->{user_id % 2}
#          ## 指定分表规则
#          table-strategy:
#            inline:
#              sharding-column: order_id
#              algorithm-expression: t_order$->{order_id % 2}

        t_order_item:
          actual-data-nodes: ds2.t_order_item$->{0..1}
          ## 通过hint方式自定义分库规则
#          database-strategy:
#            hint:
#              algorithmClassName: com.hujy.demo.hint.HintSharding
          ## 自定义分表规则
          table-strategy:
            standard:
              sharding-column: order_id
              precise-algorithm-class-name: com.hujy.demo.hint.ShardingTable
#            inline:
#              sharding-column: order_id
#              algorithm-expression: t_order_item$->{order_id % 2}
          ## 生成分布式主键
#          key-generator:
#            column: item_id
#            type: SNOWFLAKE

      ## 绑定主表与子表，避免关联查询导致的全数据源路由
#      binding-tables: t_order,t_order_item

      ## 配置广播表：以广播的形式保存（如果只涉及查询的话可以不配置，会随机取一个数据源）
#      broadcast-tables: t_config

    ## 打印sql
    props:
      sql:
        show: true